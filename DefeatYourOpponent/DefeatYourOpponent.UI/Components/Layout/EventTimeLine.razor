@rendermode @(new InteractiveServerRenderMode(false))
@using DefeatYourOpponent.Domain
@using DefeatYourOpponent.Domain.Entities
@using DefeatYourOpponent.Domain.Entities.Commons
@using DefeatYourOpponent.Domain.Misc
@using DefeatYourOpponent.UI.ViewModel
@inject EventTimeLineViewModel EventTimeLineViewModel


<div class="text-center">
    @if (_targetEventData != null && _opponentEventData != null && _eventTimeTicks != null)
    {
        <table style="display:inline-block;">
            <tr style="height:@(_targetImagePositionList.Max(x => x.Y) + Shared.SettingEntity.ChampionImageWidth + _timeLineVerticalPadding)px;">
                <td>
                    <img src=@ComponentUtility.GetChampionImagePath(PlayerDataList.First(x => x.ParticipantId.ToString() == TargetId).Champion) class="rounded-circle m-2" width="100">
                </td>
            </tr>
            <tr style="height:50px;">
                <td></td>
            </tr>
            <tr style="height:@(_opponentImagePositionList.Max(x => x.Y) + Shared.SettingEntity.ChampionImageWidth + _timeLineVerticalPadding)px;">
                <td>
                    <img src=@ComponentUtility.GetChampionImagePath(PlayerDataList.First(x => x.ParticipantId.ToString() == OpponentId).Champion) class="rounded-circle m-2" width="100">
                </td>
            </tr>
            <tr style="height:50px;">
                <td></td>
            </tr>
        </table>

        <div style="display:inline-block; overflow-x:scroll; overflow-y:hidden; @EventTimeLineAdditionalStyle">
            <table style="width:@(_targetImagePositionList.Max(x => x.EndX) + 110 + _timeLineBarPadding)px;">
                <tr style="height:@(_targetImagePositionList.Max(x => x.Y) + Shared.SettingEntity.ChampionImageWidth + _timeLineVerticalPadding)px;">
                    <td style="position:relative; width:@(_targetImagePositionList.Max(x => x.EndX) + 110 + _timeLineBarPadding)px; z-index:1000;">
                        <EventItem EventType="EventType"
                                   EventData="_targetEventData"
                                   PlayerDataList="PlayerDataList"
                                   TimeLineBarPadding="_timeLineBarPadding"
                                   ImagePostionList="_targetImagePositionList">
                        </EventItem>
                    </td>
                </tr>
                <tr style="height:50px;">
                    <td><hr /></td>
                </tr>
                <tr style="height:@(_opponentImagePositionList.Max(x => x.Y) + Shared.SettingEntity.ChampionImageWidth + _timeLineVerticalPadding)px;">
                    <td style="position:relative; z-index:100;">
                        <EventItem EventType="EventType"
                                   EventData="_opponentEventData"
                                   PlayerDataList="PlayerDataList"
                                   TimeLineBarPadding="_timeLineBarPadding"
                                   ImagePostionList="_opponentImagePositionList">
                        </EventItem>
                    </td>
                </tr>
                <tr style="height:100px;">
                    <td style="position:relative; z-index:0;">
                        @foreach (var eventTime in _eventTimeTicks)
                        {
                            <div style="position:absolute; padding-left:@(_timeLineBarPadding)px; left:@(eventTime.TotalSeconds)px; display:inline-block; top:@(-(_targetImagePositionList.Max(x => x.Y) + _opponentImagePositionList.Max(x => x.Y) + _timeLineVerticalBarSizePadding - 50))px;">
                                <div style="background-color:lightblue; width:2px; height:@(_targetImagePositionList.Max(x => x.Y) + _opponentImagePositionList.Max(x => x.Y) + _timeLineVerticalBarSizePadding)px;"></div>
                                <span style="background-color:white; margin-left:-@(_timeLineBarPadding)px;">@eventTime.ToString(@"mm\:ss")</span>
                            </div>
                        }
                    </td>
                </tr>
            </table>
        </div>
    }
</div>


@code {
    #pragma warning disable CS8618
    [Parameter]
    public EventType EventType { get; set; }
    [Parameter]
    public TimeLineEntity TimeLine { get; set; }
    [Parameter]
    public string TargetId { get; set; }
    [Parameter]
    public string OpponentId { get; set; }
    [Parameter]
    public List<PlayerDataEntity> PlayerDataList { get; set; }
    [Parameter]
    public string? EventTimeLineAdditionalStyle { get; set; }
#pragma warning restore CS8618

    private Dictionary<TimeSpan, List<string>>? _targetEventData { get; set; }
    private Dictionary<TimeSpan, List<string>>? _opponentEventData { get; set; }
    private List<TimeSpan>? _eventTimeTicks { get; set; }
    private List<ImagePostionEntity>? _targetImagePositionList;
    private List<ImagePostionEntity>? _opponentImagePositionList;

    private int _timeLineBarPadding = 19;
    private int _timeLineVerticalPadding = 10;
    private int _timeLineVerticalBarSizePadding = 250;

    private int _renderedTime = 0;

    protected override void OnAfterRender(bool firstRender)
    {
        try
        {
            if (TimeLine != null && _renderedTime == 0)
            {
                UpdateEventTimeline(TimeLine, EventType);
                _targetImagePositionList = EventTimeLineViewModel.GetImagePositionList(_targetEventData, EventType);
                _opponentImagePositionList = EventTimeLineViewModel.GetImagePositionList(_opponentEventData, EventType);
                StateHasChanged();
                _renderedTime++;
            }
            else if (_renderedTime == 1)
            {
                StateHasChanged();
                _renderedTime++;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private void UpdateEventTimeline(TimeLineEntity timeLine, EventType eventType)
    {
        switch (eventType)
        {
            case EventType.PURCHASE:
                _targetEventData = EventTimeLineViewModel.GetPurchaseTimeline(timeLine.PurchaseData, TargetId);
                _opponentEventData = EventTimeLineViewModel.GetPurchaseTimeline(timeLine.PurchaseData, OpponentId);

                _eventTimeTicks = EventTimeLineViewModel.GetEventTimespan(_targetEventData, _opponentEventData);
                break;
            case EventType.KILL:
                _targetEventData = EventTimeLineViewModel.GetKillTimeline(timeLine.KillData, TargetId);
                _opponentEventData = EventTimeLineViewModel.GetKillTimeline(timeLine.KillData, OpponentId);

                _eventTimeTicks = EventTimeLineViewModel.GetEventTimespan(_targetEventData, _opponentEventData);
                break;
            default:
                throw new NotImplementedException();
        }

        if (_targetEventData == null || _opponentEventData == null || _eventTimeTicks == null)
        {
            throw new Exception();
        }
    }

}
