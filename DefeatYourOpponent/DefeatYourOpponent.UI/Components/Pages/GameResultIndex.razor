@page "/"
@using DefeatYourOpponent.Domain.Entities
@using DefeatYourOpponent.Domain.Entities.Commons
@using DefeatYourOpponent.Domain.Exceptions
@using DefeatYourOpponent.Domain.Logics
@using DefeatYourOpponent.Domain.Misc
@using DefeatYourOpponent.Domain.Repositories
@using DefeatYourOpponent.UI.ViewModel
@using RiotSharp
@using RiotSharp.Misc
@rendermode InteractiveServer
@inject IGameResultRepository GameResultRepository
@inject IErrorMessageConverterRepository ErrorMessageConverterRepository
@inject IRiotDataConverterRepository RiotDataConverterRepository
@inject ChampionsDataEntity ChampionsDataEntity
@inject GameResultIndexViewModel GameResultIndexViewModel
@inject NavigationManager NavigationManager

<PageTitle>GameResultIndex</PageTitle>

<form @onsubmit=EnterSummonerName class="input-group mb-3">
    <span class="input-group-text rounded-end rounded-pill pe-1"> Region</span>
    <select class="form-select" style="max-width:150px;" @bind="_selectedRegion">
        <option value="-1" selected>Select region</option>
        <option class="ms-2" value="@((int)Region.Jp)">@Region.Jp</option>
        <option class="ms-2" value="@((int)Region.Na)">@Region.Na</option>
        <option class="ms-2" value="@((int)Region.Kr)">@Region.Kr</option>
    </select>
    <input class="form-control" @bind="_enteredSummonerName" placeholder="Type Summoner Name!" />
    <div class="input-group-append">
        <button class="btn btn-primary rounded-start rounded-pill ps-1" type="button" @onclick="EnterSummonerName">GO </button>
    </div>
</form>
<h5 class="ms-2" style="color:red;">
    @_serchErrorMessage
</h5>

<div class="row ms-2">
    <div class="col-auto">
        <select class="form-select form-select-sm mx-2" @bind="_selectedQueueType">
            <option selected value="0">All Queue Type</option>
            @foreach (var queueType in RiotDataConverterRepository.GetSelectableQueueType(_includeSpecialGame))
            {
                <option value=@queueType.QueueId>@queueType.Description</option>
            }
        </select>
    </div>
    <div class="col-auto">
        <select class="form-select form-select-sm mx-2" @bind="_selectedPosition">
            <option selected value="0">All Position</option>
            <option value=@((int)TeamPosition.TOP)>TOP</option>
            <option value=@((int)TeamPosition.JUNGLE)>JUNGLE</option>
            <option value=@((int)TeamPosition.MIDDLE)>MID</option>
            <option value=@((int)TeamPosition.BOTTOM)>BOT</option>
            <option value=@((int)TeamPosition.UTILITY)>SUP</option>
        </select>
    </div>
    <div class="col-auto">
        <div class="input-group">
            <button class="btn p-0 rounded" type="button" data-bs-toggle="dropdown" aria-expanded="false" @onclick="FocusInputForm">
                <input type="text" class="form-control form-control-sm rounded" placeholder="Champion name" @oninput="x => UpdataChampionList(x.Value?.ToString())" @bind-value="_inputedChampionName" @ref="_inputFormReference">
            </button>
            
            <ul class="dropdown-menu w-100" style="overflow-y: scroll; max-height:300px;">
                <li><button class="dropdown-item" type="button" @onclick="() => ClickChampionListRow()">@GameResultIndexViewModel.DefaultInputedChampionName</button></li>
                @foreach (var champion in _championList)
                {
                    <li><button class="dropdown-item" type="button" @onclick="() => ClickChampionListRow(champion.Id)">@champion.Id</button></li>
                }
            </ul>
        </div>
    </div>
</div>

<table class="mt-2">
    <tr>
        <th width="200px">Queue</th>
        <th width="100px">Champion</th>
        <th width="100px">Result</th>
        <th width="300px" colspan="6" style="text-align:center;">Item</th>
    </tr>
    @foreach (var gameResult in GameResultIndexViewModel.GameResultList)
    {
        <tr>
            <td>@RiotDataConverterRepository.QueueIdToString(gameResult.QueueId)</td>
            <td><img src=@ComponentUtility.GetChampionImagePath(gameResult.TargetPlayerData.Champion) class="rounded-circle ms-3" width="50"></td>
            <td>@RiotDataConverterRepository.WinToString(gameResult.Win)</td>
            <td colspan="6">
                @foreach (var itemId in gameResult.TargetPlayerData.Items)
                {
                    <img src=@ComponentUtility.GetItemImagePath(itemId) width="50">
                }
            </td>
            <td><img src=@ComponentUtility.GetItemImagePath(gameResult.TargetPlayerData.Ward) width="50"></td>
            <td><button class="btn btn-primary" @onclick="x => NavigateToGameDetail(_selectedRegion, gameResult.MatchId, gameResult.TargetId, gameResult.OpponentId)">See Detail</button></td>
        </tr>
    }
</table>

@code{
    private string? _enteredSummonerName;
    private string _serchErrorMessage = string.Empty;
    private int _selectedRegion = -1;
    private int _selectedQueueType;
    private int _selectedPosition;
    private bool _includeSpecialGame = false;
    private string _championSearchFormClassString = string.Empty;
    private string _inputedChampionName = string.Empty;
    private List<ChampionDataEntity> _championList = new List<ChampionDataEntity>();
    private ElementReference _inputFormReference;

    protected override void OnInitialized()
    {
        _championList = ChampionsDataEntity.Data.Values.ToList();
        base.OnInitialized();
    }

    private async void EnterSummonerName()
    {
        var count = 10;
        _serchErrorMessage = string.Empty;
        try
        {
            var tags = GameResultIndexViewModel.GetTags(_selectedQueueType, _selectedPosition, _inputedChampionName);
            await GameResultIndexViewModel.GetGameResultEntitiesBySummonerNameAsync(_selectedRegion, _enteredSummonerName, tags, count);
        }
        catch (RiotSharpException riotSharpException)
        {
            _serchErrorMessage = ErrorMessageConverterRepository.GetMessage(Language.ja_JP, riotSharpException);
        }
        catch (InternalException exception)
        {
            _serchErrorMessage = ErrorMessageConverterRepository.GetMessage(Language.ja_JP, exception);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void UpdataChampionList(string? championName)
    {
        if (championName == null)
        {
            return;
        }
        _championList = ChampionsDataEntity.Data.Values.Where(x => x.Id.Contains(championName, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void ClickChampionListRow()
    {
        ClickChampionListRow(GameResultIndexViewModel.DefaultInputedChampionName);
    }

    private void ClickChampionListRow(string championId)
    {
        _inputedChampionName = championId;
        UpdataChampionList(championId);
    }

    private async void FocusInputForm()
    {
        if (_inputedChampionName == GameResultIndexViewModel.DefaultInputedChampionName)
        {
            UpdataChampionList(string.Empty);
        }
        else
        {
            UpdataChampionList(_inputedChampionName);
        }
        await _inputFormReference.FocusAsync();
    }

    private void NavigateToGameDetail(int regionNum, string matchId, int targetId, int opponentId)
    {
        var region = (Region)regionNum;
        NavigationManager.NavigateTo($"/{region}/game={matchId}_target={targetId}_opponent={opponentId}");
    }
}